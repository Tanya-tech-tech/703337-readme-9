import { PrismaClient } from '@prisma/client';


const FIRST_TAG_UUID = '39614113-7ad5-45b6-8093-06455437e1e2';
const SECOND_TAG_UUID = 'efd775e2-df55-4e0e-a308-58249f5ea202';

const FIRST_POST_UUID = '6d308040-96a2-4162-bea6-2338e9976540';
const SECOND_POST_UUID = 'ab04593b-da99-4fe3-8b4b-e06d82e2efdd';

const FIRST_USER_ID = '658170cbb954e9f5b905ccf4';
const SECOND_USER_ID = '6581762309c030b503e30512';

// const FIRST_LIKES_ID = '658170cbb954e9f5b905cyf4';
// const SECOND_LIKES_ID = '6581762309c030b503e33512';

function getTags() {
  return [
    { id: FIRST_TAG_UUID, text: '–ö–Ω–∏–≥–∏' },
    { id: SECOND_TAG_UUID, text: '–ö–æ–º–ø—å—é—Ç–µ—Ä—ã' },
  ];
}

function getPosts() {
  return [
    {
      id: FIRST_POST_UUID,
      repost: undefined,
      published: undefined,
      userId: FIRST_USER_ID,
      name: 'Prisma Client',
      preview: '–°–ª—É—á–∞–π –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏',
      message: '–í Prisma Client –Ω–µ—Ç –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –º–æ–¥–µ–ª–∏. –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –æ–Ω –ø–æ–º–æ–≥–∞–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –ø—Ä–æ—Å—Ç—ã–µ –æ–±—ä–µ–∫—Ç—ã JavaScript. ',
      tags: {
        connect: [{ id: FIRST_TAG_UUID }],
      },
      likes: [
        {userId: FIRST_USER_ID}, {userId: SECOND_USER_ID}
      ]
    },
    {
      id: SECOND_POST_UUID,
      type: 'video',
      userId: FIRST_USER_ID,
      name: '–ü–æ–ª–µ–∑–Ω–∞—è –∫–Ω–∏–≥–∞ –ø–æ JavaScript',
      link: '–°–µ–∫—Ä–µ—Ç—ã –∏ —Ç–∞–π–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –ø–æ JavaScript.',
      tags: {
        connect: [
          { id: FIRST_TAG_UUID },
          { id: SECOND_TAG_UUID },
        ]
      },
      comments: [
          {
            message: '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ª–∏—á–Ω–∞—è –∫–Ω–∏–≥–∞!',
            userId: FIRST_USER_ID,
          },
          {
            message: '–ù–∞–¥–æ –±—É–¥–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å. –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.',
            userId: SECOND_USER_ID,
          }
      ]
    }
  ]
}

async function seedDb(prismaClient: PrismaClient) {
  const mockTags = getTags();
  for (const tag of mockTags) {
    await prismaClient.tag.upsert({
      where: { id: tag.id },
      update: {},
      create: {
        id: tag.id,
        text: tag.text
      }
    });
  }

  const mockPosts = getPosts();
  for (const post of mockPosts) {
    await prismaClient.post.upsert({
      where: { id: post.id },
      update: {},
      create: {
        id: post.id,
        type: post.type,
        repost: post.repost,
        published: post.published,
        tags: post.tags,
        userId: post.userId,
        comments: post.comments ? {
          create: post.comments
        } : undefined,
        likes: post.likes ? {
          create: post.likes
        } : undefined
      }
    })
  }

  console.info('ü§òÔ∏è Database was filled');
}

async function bootstrap() {
  const prismaClient = new PrismaClient();

  try {
    await seedDb(prismaClient);
    globalThis.process.exit(0);
  } catch (error: unknown) {
    console.error(error);
    globalThis.process.exit(1);
  } finally {
    await prismaClient.$disconnect();
  }
}



bootstrap();
